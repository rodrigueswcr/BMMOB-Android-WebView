name: Build APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          # ⛔️ Nada de cache aqui (evita procurar arquivos Gradle antes da hora)

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          # Usa a cmdline-tools 12.0 (build 11076708) já instalada no runner
          cmdline-tools-version: 11076708
          packages: |
            platform-tools
            platforms;android-34
            build-tools;34.0.0

      - name: Confirm sdk.dir for Gradle
        run: echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties

      - name: Install Gradle 8.7 (CLI to bootstrap wrapper)
        run: |
          curl -sL https://services.gradle.org/distributions/gradle-8.7-bin.zip -o gradle.zip
          unzip -q gradle.zip -d "$HOME/gradle"
          echo "$HOME/gradle/gradle-8.7/bin" >> "$GITHUB_PATH"
          gradle -v

      # Cria o projeto Android em tempo de execução
      - name: Generate Android project (WebView wrapper)
        shell: bash
        run: |
          set -e
          mkdir -p app/src/main/java/com/bmmob/app
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values/themes

          cat > settings.gradle.kts <<'EOF'
          pluginManagement { repositories { gradlePluginPortal(); google(); mavenCentral() } }
          dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories { google(); mavenCentral() }
          }
          rootProject.name = "BMMOB"
          include(":app")
          EOF

          cat > build.gradle.kts <<'EOF'
          plugins {
            id("com.android.application") version "8.5.2" apply false
            id("org.jetbrains.kotlin.android") version "1.9.24" apply false
          }
          EOF

          cat > gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
          android.useAndroidX=true
          kotlin.code.style=official
          EOF

          cat > app/build.gradle.kts <<'EOF'
          plugins {
            id("com.android.application")
            id("org.jetbrains.kotlin.android")
          }
          android {
            namespace = "com.bmmob.app"
            compileSdk = 34
            defaultConfig {
              applicationId = "com.bmmob.app"
              minSdk = 24
              targetSdk = 34
              versionCode = 1
              versionName = "1.0"
              resValue("string", "app_name", "BMMOB Treinamento")
            }
            buildTypes {
              release {
                isMinifyEnabled = true
                proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
              }
              debug { isMinifyEnabled = false }
            }
            compileOptions {
              sourceCompatibility = JavaVersion.VERSION_17
              targetCompatibility = JavaVersion.VERSION_17
            }
            kotlinOptions { jvmTarget = "17" }
          }
          dependencies {
            implementation("androidx.core:core-ktx:1.13.1")
            implementation("androidx.appcompat:appcompat:1.7.0")
            implementation("com.google.android.material:material:1.12.0")
            implementation("androidx.activity:activity-ktx:1.9.2")
            implementation("androidx.webkit:webkit:1.11.0")
          }
          EOF

          cat > app/proguard-rules.pro <<'EOF'
          -keep class android.webkit.** { *; }
          -dontwarn android.webkit.**
          EOF

          cat > app/src/main/AndroidManifest.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <application
              android:allowBackup="true"
              android:label="@string/app_name"
              android:icon="@mipmap/ic_launcher"
              android:roundIcon="@mipmap/ic_launcher_round"
              android:supportsRtl="true"
              android:theme="@style/Theme.Material3.DayNight.NoActionBar">
              <activity
                android:name=".MainActivity"
                android:exported="true"
                android:launchMode="singleTop"
                android:configChanges="orientation|screenSize|keyboardHidden|keyboard|uiMode"
                android:screenOrientation="portrait">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN"/>
                  <category android:name="android.intent.category.LAUNCHER"/>
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF

          cat > app/src/main/res/values/strings.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <string name="app_name">BMMOB Treinamento</string>
            <string name="web_url">https://rodrigueswcr.github.io/BMMOB-Treinamento/</string>
            <string name="permission_location_rationale">
              O app precisa de acesso à localização para habilitar recursos de geolocalização no site.
            </string>
          </resources>
          EOF

          cat > app/src/main/res/layout/activity_main.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent">
            <WebView
              android:id="@+id/webview"
              android:layout_width="match_parent"
              android:layout_height="match_parent" />
          </FrameLayout>
          EOF

          cat > app/src/main/res/values/themes/themes.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <style name="Theme.Material3.DayNight.NoActionBar" parent="Theme.Material3.DayNight.NoActionBar"/>
          </resources>
          EOF

          cat > app/src/main/java/com/bmmob/app/MainActivity.kt <<'EOF'
          package com.bmmob.app

          import android.Manifest
          import android.annotation.SuppressLint
          import android.content.ActivityNotFoundException
          import android.content.Intent
          import android.content.pm.PackageManager
          import android.net.Uri
          import android.os.Build
          import android.os.Bundle
          import android.webkit.*
          import androidx.activity.ComponentActivity
          import androidx.activity.result.contract.ActivityResultContracts
          import androidx.core.content.ContextCompat

          class MainActivity : ComponentActivity() {

            private lateinit var webView: WebView
            private var filePathCallback: ValueCallback<Array<Uri>>? = null

            private val fileChooserLauncher = registerForActivityResult(
              ActivityResultContracts.StartActivityForResult()
            ) { result ->
              val dataIntent = result.data
              val resultUris = WebChromeClient.FileChooserParams.parseResult(result.resultCode, dataIntent)
              filePathCallback?.onReceiveValue(resultUris)
              filePathCallback = null
            }

            private val requestLocationPermission =
              registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { _ -> }

            @SuppressLint("SetJavaScriptEnabled")
            override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContentView(R.layout.activity_main)

              webView = findViewById(R.id.webview)

              val settings = webView.settings
              settings.javaScriptEnabled = true
              settings.domStorageEnabled = true
              settings.databaseEnabled = true
              settings.cacheMode = WebSettings.LOAD_DEFAULT
              settings.allowFileAccess = false
              settings.allowContentAccess = true
              settings.mediaPlaybackRequiresUserGesture = true
              settings.userAgentString = settings.userAgentString + " BMMOB-WebView"

              CookieManager.getInstance().setAcceptCookie(true)
              if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                CookieManager.getInstance().setAcceptThirdPartyCookies(webView, true)
              }

              webView.webViewClient = object : WebViewClient() {
                override fun shouldOverrideUrlLoading(view: WebView, request: WebResourceRequest): Boolean {
                  val url = request.url.toString()
                  if (!url.startsWith("http://") && !url.startsWith("https://")) {
                    try { startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(url))) } catch (_: ActivityNotFoundException) {}
                    return true
                  }
                  return false
                }
              }

              webView.webChromeClient = object : WebChromeClient() {
                override fun onGeolocationPermissionsShowPrompt(origin: String?, callback: GeolocationPermissions.Callback?) {
                  val fine = ContextCompat.checkSelfPermission(this@MainActivity, Manifest.permission.ACCESS_FINE_LOCATION)
                  val coarse = ContextCompat.checkSelfPermission(this@MainActivity, Manifest.permission.ACCESS_COARSE_LOCATION)
                  if (fine != PackageManager.PERMISSION_GRANTED && coarse != PackageManager.PERMISSION_GRANTED) {
                    requestLocationPermission.launch(arrayOf(
                      Manifest.permission.ACCESS_FINE_LOCATION,
                      Manifest.permission.ACCESS_COARSE_LOCATION
                    ))
                  }
                  callback?.invoke(origin, true, false)
                }

                override fun onShowFileChooser(
                  webView: WebView?,
                  filePathCallback: ValueCallback<Array<Uri>>?,
                  fileChooserParams: FileChooserParams?
                ): Boolean {
                  this@MainActivity.filePathCallback = filePathCallback
                  return try {
                    fileChooserParams?.createIntent()?.let { intent ->
                      fileChooserLauncher.launch(intent)
                      true
                    } ?: run {
                      this@MainActivity.filePathCallback = null
                      false
                    }
                  } catch (e: Exception) {
                    this@MainActivity.filePathCallback = null
                    false
                  }
                }
              }

              webView.loadUrl(getString(R.string.web_url))
            }

            override fun onBackPressed() {
              if (this::webView.isInitialized && webView.canGoBack()) webView.goBack()
              else super.onBackPressed()
            }
          }
          EOF

      - name: Add app icon if provided
        shell: bash
        run: |
          set -e
          if [ -f app_icon.png ]; then
            echo "Usando app_icon.png como ícone"
            mkdir -p app/src/main/res/drawable app/src/main/res/mipmap-anydpi-v26 app/src/main/res/values
            cp app_icon.png app/src/main/res/drawable/ic_launcher_foreground.png
            printf '%s\n' '<?xml version="1.0" encoding="utf-8"?>' \
              '<resources><color name="ic_launcher_background">#FFFFFFFF</color></resources>' \
              > app/src/main/res/values/ic_launcher_background.xml
            printf '%s\n' '<?xml version="1.0" encoding="utf-8"?>' \
              '<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">' \
              '  <background android:drawable="@color/ic_launcher_background"/>' \
              '  <foreground android:drawable="@drawable/ic_launcher_foreground"/>' \
              '</adaptive-icon>' \
              > app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
            cp app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
          else
            echo "Sem app_icon.png — usando ícone padrão do Android"
          fi

      - name: Generate Gradle wrapper
        run: |
          gradle wrapper --gradle-version 8.7
          chmod +x gradlew

      # ✅ Agora que existem wrapper e arquivos Gradle, ativamos o cache corretamente
      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Build Debug APK
        run: ./gradlew --no-daemon assembleDebug --stacktrace

      - name: Rename APK
        run: mv app/build/outputs/apk/debug/app-debug.apk "BMMOB-Treinamento-debug.apk"

      - name: Upload APK (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: BMMOB-Treinamento-debug-apk
          path: BMMOB-Treinamento-debug.apk
